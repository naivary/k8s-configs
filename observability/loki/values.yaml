deploymentMode: SimpleScalable
global:
  clusterDomain: "cluster.local"
chunksCache:
  allocatedMemory: 512
loki:
  image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.3
    digest: null
    pullPolicy: IfNotPresent
  storage:
    use_thanos_objstore: true
    type: s3
    s3:
      region: ${S3_REGION}
      endpoint: ${S3_ENDPOINT}
      secretAccessKey: ${S3_SECRET_KEY}
      accessKeyId: ${S3_ACCESS_KEY}
      s3ForcePathStyle: true
      insecure: true
    bucketNames:
      chunks: ${LOKI_CHUNKS_BUCKET_NAME}
      ruler: ${LOKI_RULER_BUCKET_NAME}
      admin: ${LOKI_ADMIN_BUCKET_NAME}
    object_store:
      type: s3
      s3:
        region: eu-central-1
        endpoint: ${S3_ENDPOINT}
        secretAccessKey: ${S3_SECRET_KEY}
        accessKeyId: ${S3_ACCESS_KEY}
        insecure: false
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 4
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true

backend:
  replicas: 2
read:
  replicas: 2
write:
  replicas: 2 # To ensure data durability with replication

gateway:
  service:
    type: ClusterIP

  nginxConfig:
    # they are still using kube-dns as a default
    resolver: coredns.kube-system.svc.cluster.local
